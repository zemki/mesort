<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\StudyController
 */
class StudyControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get('studies/new');

        $response->assertOk();
        $response->assertViewIs('study.create_edit');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function deleteallbyuser_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->post('admin/deletestudiesbyuser/{user}', [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function destroy_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $study = factory(\App\Study::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->delete('studies/{study}');

        $response->assertOk();
        $this->assertDeleted($study);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function duplicate_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $study = factory(\App\Study::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get('studies/{study}/duplicate');

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function edit_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $study = factory(\App\Study::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get('studies/{study}/edit');

        $response->assertOk();
        $response->assertViewIs('study.create_edit');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function get_users_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $study = factory(\App\Study::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->get('studies/users/{study}');

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function store_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->post('studies', [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function update_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $study = factory(\App\Study::class)->create();
        $user = factory(\App\User::class)->create();

        $response = $this->actingAs($user)->patch('studies/{study}', [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    // test cases...
}
